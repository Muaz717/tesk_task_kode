// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Muaz717/todo-app/internal/domain/models"
)

// Item is an autogenerated mock type for the Item type
type Item struct {
	mock.Mock
}

// AllItems provides a mock function with given fields: ctx, userId
func (_m *Item) AllItems(ctx context.Context, userId int64) ([]models.Item, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for AllItems")
	}

	var r0 []models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.Item, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.Item); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, userId, title, description
func (_m *Item) Create(ctx context.Context, userId int64, title string, description string) (int64, error) {
	ret := _m.Called(ctx, userId, title, description)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (int64, error)); ok {
		return rf(ctx, userId, title, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) int64); ok {
		r0 = rf(ctx, userId, title, description)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, userId, title, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewItem creates a new instance of Item. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *Item {
	mock := &Item{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
